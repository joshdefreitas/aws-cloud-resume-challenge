name: Deploy website to S3 + CloudFront (OIDC)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Fail fast if the role ARN secret is missing
      - name: Validate role ARN
        run: |
          test -n "${AWS_DEPLOY_ROLE_ARN}" || { echo "ERROR: AWS_DEPLOY_ROLE_ARN is empty"; exit 1; }
        env:
          AWS_DEPLOY_ROLE_ARN: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: gha-${{ github.run_id }}
          aws-region: us-east-2

      - name: Verify AWS creds
        run: aws sts get-caller-identity

      # Sanity checks for your secrets (does not print values)
      - name: Validate deploy targets
        run: |
          test -n "${AWS_S3_BUCKET}" || { echo "ERROR: AWS_S3_BUCKET secret is empty"; exit 1; }
          test -n "${CLOUDFRONT_DISTRIBUTION_ID}" || { echo "ERROR: CLOUDFRONT_DISTRIBUTION_ID secret is empty"; exit 1; }
          case "$AWS_S3_BUCKET" in
            s3://*|*/*) echo "Bucket must be just the name (no s3://, no /)"; exit 1;;
          esac
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      # Upload long-lived assets (exclude HTML) with strong caching
      - name: Upload assets (long cache)
        run: |
          aws s3 sync website "s3://${AWS_S3_BUCKET}" \
            --exclude "*.html" \
            --cache-control "public,max-age=31536000,immutable" \
            --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

      # Upload HTML with no-cache so page updates show immediately
      - name: Upload HTML (no-cache)
        run: |
          aws s3 sync website "s3://${AWS_S3_BUCKET}" \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache" \
            --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

      # Invalidate CloudFront so edges fetch fresh content
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/*"
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
